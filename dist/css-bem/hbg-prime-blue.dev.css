@charset "UTF-8";
/* ==========================================================================

    Bootstrap.scss

    Included layers/folders with description:

    - Settings      – used with preprocessors and contain font, colors definitions, etc.
    - Tools         – globally used mixins and functions. It’s important not to output any CSS in the first 2 layers.
    - Generic       – reset and/or normalize styles, box-sizing definition, etc. This is the first layer which generates actual CSS.
    - Elements      – styling for bare HTML elements (like H1, A, etc.). These come with default styling from the browser so we can redefine them here.
    - Objects       – class-based selectors which define undecorated design patterns, for example media object known from OOCSS
    - Components    – specific UI components. This is where majority of our work takes place and our UI components are often composed of Objects and Components
    - Utilities     – utilities and helper classes with ability to override anything which goes before in the triangle, eg. hide helper class

    Inspiration: https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/

   ========================================================================== */
/* Settings */
/* A wrapper aware breakpoint */
/* line 1, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/objects/_box.scss */
.o-box {
  background: #fff; }
  /* line 42, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/tools/_material.scss */
  body:not(.material-no-radius) .o-box {
    border-radius: 2px; }
  /* line 2, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/tools/_material.scss */
  body:not(.material-no-shadow) .o-box {
    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.08); }
    @media print {
      /* line 2, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/tools/_material.scss */
      body:not(.material-no-shadow) .o-box {
        box-shadow: none; } }

/* line 1, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/objects/_reset.scss */

.o-reset-button {
  background: none;
  border: none;
  font: inherit;
  color: inherit;
  padding: 0; }

/* line 1, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_box.scss */
.c-card {
  display: flex; }

/* Modifiers */
/* line 1, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
.c-header__row {
  display: flex;
  flex-wrap: no-wrap;
  align-items: center;
  padding: 15px 15px; }

/* line 8, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
.c-header__item {
  display: flex;
  flex-wrap: no-wrap;
  align-items: center;
  flex-grow: 1; }
  /* line 14, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
  .c-header__item.c-header__item--left {
    justify-content: flex-start; }
  /* line 18, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
  .c-header__item.c-header__item--right {
    justify-content: flex-end; }
  /* line 22, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
  .c-header__item.c-header__item--center {
    justify-content: center; }

/* line 27, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
.c-header__item:not(:last-child) {
  margin-right: 30px; }

/* line 33, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
.c-header__logo h1 {
  padding-bottom: 0; }

/* line 37, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
.c-header__logo a {
  display: block; }

/* line 41, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
.c-header__logo img,
.c-header__logo svg {
  height: auto;
  width: 100%;
  max-width: 18rem;
  display: block; }

/* line 51, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
.c-header--primary .c-header__row {
  padding: 30px 15px; }

/* line 56, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
.c-header--top {
  font-size: 80%;
  line-height: 1; }
  /* line 57, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
  .c-header--top .c-header__row {
    padding: 11.25px 15px; }
  /* line 63, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_header.scss */
  .c-header--top a.pricon:before {
    vertical-align: top; }

/* line 1, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_navbar.scss */
.c-navbar {
  display: flex;
  flex-wrap: no-wrap;
  align-items: center;
  /* TEMP */
  margin: -15px; }
  /* line 9, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_navbar.scss */
  .c-navbar .c-navbar__item {
    position: relative; }
    /* line 11, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_navbar.scss */
    .c-navbar .c-navbar__item a {
      display: block;
      padding: 15px; }
  /* line 19, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_navbar.scss */
  .c-navbar .c-navbar__item.is-current:after,
  .c-navbar .c-navbar__item.is-current-ancestor:not(.c-navbar__sub):after {
    bottom: 0;
    left: 50%;
    border: solid transparent;
    content: "";
    position: absolute;
    pointer-events: none;
    border-color: rgba(255, 255, 255, 0);
    border-bottom-color: #fff;
    border-width: 8px;
    transform: translate(-50%, 0); }
  /* line 37, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_navbar.scss */
  .c-navbar .c-navbar__sub {
    display: none; }
  /* line 41, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_navbar.scss */
  .c-navbar .c-navbar__item.is-open .c-navbar__sub {
    display: block; }
  /* line 45, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/components/_navbar.scss */
  .c-navbar .c-navbar__item_button:hover {
    cursor: pointer; }

/* line 1, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/utilities/_text.scss */
.u-no-decoration,
.u-no-decoration:hover,
.u-no-decoration:focus {
  text-decoration: none; }

/* line 7, /Volumes/Lagring/vagrant/public/hbgprime.dev/source/sass-bem/utilities/_text.scss */
.u-nowrap {
  white-space: nowrap; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
