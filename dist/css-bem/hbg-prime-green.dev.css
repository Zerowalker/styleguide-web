@charset "UTF-8";
/* ==========================================================================

    Bootstrap.scss

    Included layers/folders with description:

    - Settings      – used with preprocessors and contain font, colors definitions, etc.
    - Tools         – globally used mixins and functions. It’s important not to output any CSS in the first 2 layers.
    - Generic       – reset and/or normalize styles, box-sizing definition, etc. This is the first layer which generates actual CSS.
    - Elements      – styling for bare HTML elements (like H1, A, etc.). These come with default styling from the browser so we can redefine them here.
    - Objects       – class-based selectors which define undecorated design patterns, for example media object known from OOCSS
    - Components    – specific UI components. This is where majority of our work takes place and our UI components are often composed of Objects and Components
    - Utilities     – utilities and helper classes with ability to override anything which goes before in the triangle, eg. hide helper class

    Inspiration: https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/

   ========================================================================== */
/* Settings */
/* A wrapper aware breakpoint */
/* line 3, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/objects/_burger.scss */
.o-burger-icon {
  display: inline-block;
  width: 24px;
  height: 18px;
  position: relative;
  transform: rotate(0deg);
  transition: .5s ease-in-out;
  top: 3px;
  padding: 5px 0;
  margin-right: 5px;
  margin-left: 5px; }

/* line 16, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/objects/_burger.scss */
.o-burger-icon span {
  display: inline-block;
  position: absolute;
  width: 100%;
  border-bottom: solid 2px;
  border-top: solid 2px;
  border-color: inherit;
  border-radius: 5px;
  opacity: 1;
  left: 0;
  transform: rotate(0deg);
  transition: .25s ease-in-out; }

/* line 30, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/objects/_burger.scss */
.o-burger-icon span:nth-child(1) {
  top: 0px;
  transform-origin: left center; }

/* line 35, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/objects/_burger.scss */
.o-burger-icon span:nth-child(2) {
  top: 7.2px;
  transform-origin: left center; }

/* line 40, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/objects/_burger.scss */
.o-burger-icon span:nth-child(3) {
  top: 14.4px;
  transform-origin: left center; }

/* line 45, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/objects/_burger.scss */
.o-burger-icon.is-open span:nth-child(1) {
  transform: rotate(45deg);
  top: -3px;
  left: 8px; }

/* line 51, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/objects/_burger.scss */
.o-burger-icon.is-open span:nth-child(2) {
  width: 0%;
  opacity: 0; }

/* line 56, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/objects/_burger.scss */
.o-burger-icon.is-open span:nth-child(3) {
  transform: rotate(-45deg);
  left: 8px; }

/*!
 * Hamburgers
 * @description Tasty CSS-animated hamburgers
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/hamburgers
 * @link https://github.com/jonsuh/hamburgers
 */
/* line 3, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/_base.scss */
.hamburger {
  padding: 15px 15px;
  display: inline-block;
  cursor: pointer;
  transition-property: opacity, filter;
  transition-duration: 0.15s;
  transition-timing-function: linear;
  font: inherit;
  color: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  margin: 0;
  overflow: visible; }
  /* line 21, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/_base.scss */
  .hamburger:hover {
    opacity: 0.7; }

/* line 31, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/_base.scss */
.hamburger-box {
  width: 40px;
  height: 24px;
  display: inline-block;
  position: relative; }

/* line 38, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/_base.scss */
.hamburger-inner {
  display: block;
  top: 50%;
  margin-top: -2px; }
  /* line 43, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/_base.scss */
  .hamburger-inner, .hamburger-inner::before, .hamburger-inner::after {
    width: 40px;
    height: 4px;
    background-color: #000;
    border-radius: 4px;
    position: absolute;
    transition-property: transform;
    transition-duration: 0.15s;
    transition-timing-function: ease; }
  /* line 56, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/_base.scss */
  .hamburger-inner::before, .hamburger-inner::after {
    content: "";
    display: block; }
  /* line 62, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/_base.scss */
  .hamburger-inner::before {
    top: -10px; }
  /* line 66, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/_base.scss */
  .hamburger-inner::after {
    bottom: -10px; }

/*
   * Slider
   */
/* line 6, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/types/_slider.scss */
.hamburger--slider .hamburger-inner {
  top: 2px; }
  /* line 9, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/types/_slider.scss */
  .hamburger--slider .hamburger-inner::before {
    top: 10px;
    transition-property: transform, opacity;
    transition-timing-function: ease;
    transition-duration: 0.15s; }
  /* line 16, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/types/_slider.scss */
  .hamburger--slider .hamburger-inner::after {
    top: 20px; }

/* line 22, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/types/_slider.scss */
.hamburger--slider.is-active .hamburger-inner {
  transform: translate3d(0, 10px, 0) rotate(45deg); }
  /* line 27, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/types/_slider.scss */
  .hamburger--slider.is-active .hamburger-inner::before {
    transform: rotate(-45deg) translate3d(-5.71429px, -6px, 0);
    opacity: 0; }
  /* line 32, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/types/_slider.scss */
  .hamburger--slider.is-active .hamburger-inner::after {
    transform: translate3d(0, -20px, 0) rotate(-90deg); }

/*
   * Slider Reverse
   */
/* line 6, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/types/_slider-r.scss */
.hamburger--slider-r .hamburger-inner {
  top: 2px; }
  /* line 9, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/types/_slider-r.scss */
  .hamburger--slider-r .hamburger-inner::before {
    top: 10px;
    transition-property: transform, opacity;
    transition-timing-function: ease;
    transition-duration: 0.15s; }
  /* line 16, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/types/_slider-r.scss */
  .hamburger--slider-r .hamburger-inner::after {
    top: 20px; }

/* line 22, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/types/_slider-r.scss */
.hamburger--slider-r.is-active .hamburger-inner {
  transform: translate3d(0, 10px, 0) rotate(-45deg); }
  /* line 27, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/types/_slider-r.scss */
  .hamburger--slider-r.is-active .hamburger-inner::before {
    transform: rotate(45deg) translate3d(5.71429px, -6px, 0);
    opacity: 0; }
  /* line 32, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/node_modules/hamburgers/_sass/hamburgers/types/_slider-r.scss */
  .hamburger--slider-r.is-active .hamburger-inner::after {
    transform: translate3d(0, -20px, 0) rotate(90deg); }

/* line 1, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_header.scss */
.c-header__row {
  display: flex;
  flex-wrap: no-wrap;
  align-items: center;
  padding: 15px 15px; }

/* line 8, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_header.scss */
.c-header__item {
  display: flex;
  flex-wrap: no-wrap;
  align-items: center;
  flex-grow: 1; }
  /* line 14, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_header.scss */
  .c-header__item.c-header__item--left {
    justify-content: flex-start; }
  /* line 18, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_header.scss */
  .c-header__item.c-header__item--right {
    justify-content: flex-end; }
  /* line 22, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_header.scss */
  .c-header__item.c-header__item--center {
    justify-content: center; }

/* line 27, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_header.scss */
.c-header__item:not(:last-child) {
  margin-right: 30px; }

/* line 33, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_header.scss */
.c-header__logo h1 {
  padding-bottom: 0; }

/* line 37, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_header.scss */
.c-header__logo img,
.c-header__logo svg {
  height: auto;
  width: 100%;
  max-width: 18rem;
  display: block; }

/* line 47, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_header.scss */
.c-header--primary .c-header__row {
  padding: 45px 15px; }

/* line 52, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_header.scss */
.c-header--top {
  font-size: 80%;
  line-height: 1; }
  /* line 53, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_header.scss */
  .c-header--top .c-header__row {
    padding: 11.25px 15px; }
  /* line 59, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_header.scss */
  .c-header--top a.pricon:before {
    vertical-align: top; }

/* line 1, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_navbar.scss */
.c-navbar {
  display: flex;
  flex-wrap: no-wrap;
  align-items: center; }
  /* line 7, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_navbar.scss */
  .c-navbar .c-navbar__item:not(:last-child) {
    margin-right: 15px; }
  /* line 10, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_navbar.scss */
  .c-navbar .c-navbar__sub {
    display: none; }
  /* line 14, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/_navbar.scss */
  .c-navbar .c-navbar__item.is-open .c-navbar__sub {
    display: block; }

/* line 1, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/utilities/_text.scss */
.u-no-decoration,
.u-no-decoration:hover,
.u-no-decoration:focus {
  text-decoration: none; }

/* line 7, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/utilities/_text.scss */
.u-nowrap {
  white-space: nowrap; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
