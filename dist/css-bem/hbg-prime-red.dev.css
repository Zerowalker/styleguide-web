@charset "UTF-8";
/* ==========================================================================

    Bootstrap.scss

    Included layers/folders with description:

    - Settings      – used with preprocessors and contain font, colors definitions, etc.
    - Tools         – globally used mixins and functions. It’s important not to output any CSS in the first 2 layers.
    - Generic       – reset and/or normalize styles, box-sizing definition, etc. This is the first layer which generates actual CSS.
    - Elements      – styling for bare HTML elements (like H1, A, etc.). These come with default styling from the browser so we can redefine them here.
    - Objects       – class-based selectors which define undecorated design patterns, for example media object known from OOCSS
    - Components    – specific UI components. This is where majority of our work takes place and our UI components are often composed of Objects and Components
    - Utilities     – utilities and helper classes with ability to override anything which goes before in the triangle, eg. hide helper class

    Inspiration: https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/

   ========================================================================== */
/* Settings */
/* A wrapper aware breakpoint */
/* line 7, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/header.scss */
.c-site-header .c-site-header__panel_row {
  display: flex;
  flex-wrap: no-wrap;
  align-items: center;
  padding: 15px 15px; }

/* line 15, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/header.scss */
.c-site-header .c-site-header__panel_item:not(:last-child) {
  margin-right: 30px; }

/* line 18, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/header.scss */
.c-site-header .c-site-header__panel_item {
  display: flex;
  flex-wrap: no-wrap;
  align-items: center;
  flex-grow: 1; }
  /* line 24, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/header.scss */
  .c-site-header .c-site-header__panel_item.c-site-header__panel_item--left {
    justify-content: flex-start; }
  /* line 27, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/header.scss */
  .c-site-header .c-site-header__panel_item.c-site-header__panel_item--right {
    justify-content: flex-end; }
  /* line 30, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/header.scss */
  .c-site-header .c-site-header__panel_item.c-site-header__panel_item--center {
    justify-content: center; }

/* line 37, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/header.scss */
.c-site-header .c-site-header__logo h1 {
  padding-bottom: 0; }

/* line 39, /Users/Nikolas/Documents/Vagrant/www-hbg/hbgprime.dev/public/source/sass-bem/components/header.scss */
.c-site-header .c-site-header__logo img, .c-site-header .c-site-header__logo svg {
  max-width: 18rem; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
