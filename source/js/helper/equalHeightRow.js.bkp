//
// @name EqualHeight
// @description  Sets element heights equally to the heighest item
//
// @markup
// <div class="grid" data-equal-container>
//     <div class="grid-md-6" data-equal-item>
//
//     </div>
//     <div class="grid-md-6" data-equal-item>
//
//     </div>
// </div>
//
HelsingborgPrime = HelsingborgPrime || {};
HelsingborgPrime.Helper = HelsingborgPrime.Helper || {};

HelsingborgPrime.Helper.EqualHeight = (function ($) {

    function EqualHeight() {
        $(function(){

            this.init();

            $(window).on('resize', function () {
                this.destroy();
                this.init();
            }.bind(this));

        }.bind(this));
    }

    /**
     * Resets heights to auto
     * @return {void}
     */
    EqualHeight.prototype.destroy = function () {
        $('[data-equal-container] [data-equal-item]').each(function (index, element) {
            $(element).css('height', 'auto');
        }.bind(this));
    };

    /**
     * Intializes equal height
     * @return {void}
     */
    EqualHeight.prototype.init = function () {
        $('[data-equal-container]').each(function (index, element) {
            this.getMaxHeight(element);
            //this.equalize(element);
        }.bind(this));
    };


    EqualHeight.prototype.getMaxHeight = function (element) {
        var heights = [];
        var lastOffsetTop = false;
        var rowNum = -1;

        $(element).find('[data-equal-item]').each(function (index, element) {
            if ($(element).offset().top !== lastOffsetTop) {
                rowNum++;
                heights[rowNum] = [];
            }

            heights[rowNum].push($(element).outerHeight());
            lastOffsetTop = $(element).offset().top;
        }.bind(this));

        console.log(heights);

        var maxHeight = Math.max.apply(null, heights);

        return maxHeight;
    };

    return new EqualHeight();

})(jQuery);
