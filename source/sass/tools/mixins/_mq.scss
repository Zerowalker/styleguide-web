$mq-breakpoints: (
    xs : 0,         //0px
    sm : 29.25em,   //468px
    md : 48em,      //768px
    lg : 60em,      //960px
    xl : 80em,      //1280px
    xxl : 100em,    //1600px
    print : print
) !default;

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function get-breakpoint-suffix($screen) {
    @if map-has-key($mq-breakpoints, $screen) {
        @if map-get($mq-breakpoints, $screen) == 0 {
            @return '';
        } @else {
            @return \@#{$screen};
        }
    }
}

@function get-breakpoint($screen, $value: 'min') {
    @if map-has-key($mq-breakpoints, $screen) {
        $length: length(map-keys($mq-breakpoints));

        @if $value == 'max' {
            @if $length > index(map-keys($mq-breakpoints), $screen) {
                @return nth(map-values($mq-breakpoints), index(map-keys($mq-breakpoints), $screen) + 1)  - 0.0625em;
            }

            @else {
                @return 0em;
            }
        }

        @elseif $value == 'min' {
            @return map-get($mq-breakpoints, $screen);
        }

    } @else {
        @return (strip-unit($screen) / 16) * 1em;
    }
}


@function mq-px-to-em($value, $base: 16) {
    @if unit($value) == 'px' {
        @return strip-unit($value) / $base * 1em;
    } @elseif unit($value) == 'em' {
        @return $value;
    } @elseif unitless($value) {
        @return $value / $base * 1em;
    } @else {
        @return 0;
    }
}

/*
 *  @mixin mq
 *  @param $from null/px/em/print - min width value
 *  @param $until null/px/em/print - max width value
 *  @param $orientation landscape/portrait - orientation
 *  @param $and string - additional condition eg. "and (min-height: 200px)"
 */

@mixin mq($from: null, $until: null, $orientation: null, $and: null) {
    $queryString: 'screen';
    $min-width: null;
    $max-width: null;

    //Min-width
    @if ($from != null and $from != 'print') {
        @if map-has-key($mq-breakpoints, $from) {
            $min-width: mq-px-to-em(map-get($mq-breakpoints, $from));
        } @else {
            $min-width: mq-px-to-em($from);
        }
    }

    //Max-width
    @if ($until != null and $until != 'print') {
        @if map-has-key($mq-breakpoints, $until) {
            $max-width: mq-px-to-em(map-get($mq-breakpoints, $until)) - mq-px-to-em(1px);
        } @else {
            $max-width: mq-px-to-em($until);
        }
    }

    //Build media query string
    @if $min-width != null and strip-unit($min-width) > 0 {
        $queryString: '#{$queryString} and (min-width: #{$min-width})';
    }

    @if $max-width != null and strip-unit($max-width) > 0 {
        $queryString: '#{$queryString} and (max-width: #{$max-width})';
    }

    //Orientation
    @if $orientation == 'landscape' {
        $queryString: '#{$queryString} and (orientation:landscape)';
    } @elseif $orientation == 'portrait' {
        $queryString: '#{$queryString} and (orientation:portrait)';
    }

    //Additional condition
    @if $and != null {
        $queryString: '#{$queryString} #{$and}';
    }

    //Reset media query string to print
    @if $from == 'print' or $until == 'print' {
        $queryString: 'print';
    }

    //Wrap content in media query if a query is defined, else only output content
    @if $queryString != 'screen' {
        @media #{$queryString} {
            @content;
        }
    } @else {
        @content;
    }
}

/*
 *  Generates directional classes (eg. margin-left, margin-right, margin-top), mainly used for utility classes
 *
 *  @param $map sass-map - Styles to include, keys will define the size (which will be used as className) and the value defines the propety value (eg. (0: 0px, 1: 1rem, 2: 2rem))
 *  @param $propety string - Style propety (eg. margin, padding, border or other directional (left, right, top, bottom) style)
 *  @param $className string - Class name that will be combined with the direction, eg. className 'm' will generate m, mx (top & bot), my (left & right), ml (left), mr (right), mt, mb
 *  @param $breakpoints list - List of breakpoints to loop through (eg. $list: xs, md, lg; will generate classes for each breakpoint (adding @breakpoint suffix)), defaults to all breakpoints
 *  @param $important boolean - Will add !important to each style if set to true
 *  @param $nameSpace string - Namesapce to prefix each class with - Defaults to 'u' (utility)
 *
 *
 * @example
 *
 *  $style-map: (
 *     0: 0,
 *     2: 2rem
 *  );
 *  @include directionalClasses($style-map, margin, 'm');
 *
 */

@mixin directionalClasses($styles, $propety, $className, $breakpoints: map-keys($mq-breakpoints), $important: true, $nameSpace: 'u') {
    @each $screen in $breakpoints {
        $suffix: get-breakpoint-suffix($screen);

        @include mq($screen) {
            @each $size, $value in $styles {

                @if ($important == true) {
                    $value: #{$value} !important;
                }

                .#{$nameSpace}-#{$className}-#{$size}#{$suffix} {
                    #{$propety}: #{$value};
                }

                .#{$nameSpace}-#{$className}x-#{$size}#{$suffix} {
                    #{$propety}-left: #{$value};
                    #{$propety}-right: #{$value};
                }

                .#{$nameSpace}-#{$className}y-#{$size}#{$suffix} {
                    #{$propety}-top: #{$value};
                    #{$propety}-bottom: #{$value};
                }

                .#{$nameSpace}-#{$className}t-#{$size}#{$suffix} {
                    #{$propety}-top: #{$value};
                }

                .#{$nameSpace}-#{$className}b-#{$size}#{$suffix} {
                    #{$propety}-bottom: #{$value};
                }

                .#{$nameSpace}-#{$className}l-#{$size}#{$suffix} {
                    #{$propety}-left: #{$value};
                }

                .#{$nameSpace}-#{$className}r-#{$size}#{$suffix} {
                    #{$propety}-right: #{$value};
                }
            }
        }
    }
}
