$mq-breakpoints: (
    xs : 0,         //0px
    sm : 29.25em,   //468px
    md : 48em,      //768px
    lg : 60em,      //960px
    xl : 80em,      //1280px
    xxl : 100em,    //1600px
    print : print
) !default;

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function get-breakpoint-suffix($screen) {
    @if map-has-key($mq-breakpoints, $screen) {
        @if map-get($mq-breakpoints, $screen) == 0 {
            @return '';
        } @else {
            @return \@#{$screen};
        }
    }
}

@function get-breakpoint($screen, $value: 'min') {
    @if map-has-key($mq-breakpoints, $screen) {
        $length: length(map-keys($mq-breakpoints));

        @if $value == 'max' {
            @if $length > index(map-keys($mq-breakpoints), $screen) {
                @return nth(map-values($mq-breakpoints), index(map-keys($mq-breakpoints), $screen) + 1)  - 0.0625em;
            }

            @else {
                @return 0em;
            }
        }

        @elseif $value == 'min' {
            @return map-get($mq-breakpoints, $screen);
        }

    } @else {
        @return (strip-unit($screen) / 16) * 1em;
    }
}


@mixin mq($screen, $orientation: null, $condition: 'min') {
    $query-string: 'screen';

    @if $condition == 'min' {
        $query-string: $query-string ' and (min-width: #{get-breakpoint($screen, min)})';
    } @else if $condition == 'max' {
        $query-string: $query-string ' and (max-width: #{get-breakpoint($screen, max)})';
    } @else if $condition == 'only' {
        $query-string: $query-string ' and (min-width: #{get-breakpoint($screen, min)}) and (max-width: #{get-breakpoint($screen, max)})';
    }

    @if $orientation == 'landscape' or $orientation == 'portrait' {
        $query-string: $query-string ' and (orientation: #{$orientation})';
    }

    @if $screen == 'print'{
        $query-string: 'print';
    }

    @if $condition == 'min' and get-breakpoint($screen) == 0 {
        @content;
    } @else {
        @media #{$query-string}
        {
            @content;
        }
    }
}


/*
 *  Generates directional classes (eg. margin-left, margin-right, margin-top), mainly used for utility classes
 *
 *  @param $map sass-map - Styles to include, keys will define the size (which will be used as className) and the value defines the propety value (eg. (0: 0px, 1: 1rem, 2: 2rem))
 *  @param $propety string - Style propety (eg. margin, padding, border or other directional (left, right, top, bottom) style)
 *  @param $className string - Class name that will be combined with the direction, eg. className 'm' will generate m, mx (top & bot), my (left & right), ml (left), mr (right), mt, mb
 *  @param $breakpoints list - List of breakpoints to loop through (eg. $list: xs, md, lg; will generate classes for each breakpoint (adding @breakpoint suffix)), defaults to all breakpoints
 *  @param $important boolean - Will add !important to each style if set to true
 *  @param $nameSpace string - Namesapce to prefix each class with - Defaults to 'u' (utility)
 *
 *
 * @example
 *
 *  $style-map: (
 *     0: 0,
 *     2: 2rem
 *  );
 *  @include directionalClasses($style-map, margin, 'm');
 *
 */
@mixin directionalClasses($styles, $propety, $className, $breakpoints: map-keys($mq-breakpoints), $important: true, $nameSpace: 'u') {
    @each $screen in $breakpoints {
        $suffix: get-breakpoint-suffix($screen);

        @include mq($screen) {
            @each $size, $value in $styles {

                @if ($important == true) {
                    $value: #{$value} !important;
                }

                .#{$nameSpace}-#{$className}-#{$size}#{$suffix} {
                    #{$propety}: #{$value};
                }

                .#{$nameSpace}-#{$className}x-#{$size}#{$suffix} {
                    #{$propety}-left: #{$value};
                    #{$propety}-right: #{$value};
                }

                .#{$nameSpace}-#{$className}y-#{$size}#{$suffix} {
                    #{$propety}-top: #{$value};
                    #{$propety}-bottom: #{$value};
                }

                .#{$nameSpace}-#{$className}t-#{$size}#{$suffix} {
                    #{$propety}-top: #{$value};
                }

                .#{$nameSpace}-#{$className}b-#{$size}#{$suffix} {
                    #{$propety}-bottom: #{$value};
                }

                .#{$nameSpace}-#{$className}l-#{$size}#{$suffix} {
                    #{$propety}-left: #{$value};
                }

                .#{$nameSpace}-#{$className}r-#{$size}#{$suffix} {
                    #{$propety}-right: #{$value};
                }
            }
        }
    }
}
